# -*- mode: nginx; mode: flyspell-prog;  ispell-current-dictionary: american -*-

# Redirect all http (80) to https (443) (www and non-www)
# And remove the (www) during the redirect
server {
  listen       80;
  # listen       [::]:80 ipv6only=on;
  server_name  <%= @server_name %> www.<%= @server_name %>;

  # Allow "Well-Known URIs" as per RFC 5785.
  # Necessary for Let’s Encrypt validation server.
  location ~* ^/.well-known/ {
      allow all;
  }

  return       301 https://$server_name:<%= @ssl_public_port %>$request_uri;
}

# Redirect www https traffic to non-www https traffic
server {
  listen      <%= @ssl_public_port %> ssl http2;
  # listen      [::]:<%= @ssl_public_port %> ssl http2 ipv6only=on;
  server_name ~^(www\.)(?<domain><%= @server_name %>)$;

  <% if @ssl_certificate %>
    ssl_certificate     <%= @ssl_certificate %>;
  <% else %>
    ssl_certificate     /etc/nginx/ssl/nginx.crt;
  <% end %>
  <% if @ssl_certificate_key %>
    ssl_certificate_key     <%= @ssl_certificate_key %>;
  <% else %>
    ssl_certificate_key     /etc/nginx/ssl/nginx.key;
  <% end %>
  <% if @ssl_trusted_certificate %>
    ssl_certificate_key     <%= @ssl_trusted_certificate %>;
  <% end %>

  ## Keep alive timeout set to a greater value for SSL/TLS.
  keepalive_timeout 75 75;

  # Allow "Well-Known URIs" as per RFC 5785.
  # Necessary for Let’s Encrypt validation server.
  location ~* ^/.well-known/ {
      allow all;
  }

  return      301 https://$domain:<%= @ssl_public_port %>$request_uri;
}

# Do the https magic and proxy the request to varnish on port 6081
server {
  listen <%= @ssl_public_port %> ssl http2;
  # listen [::]:<%= @ssl_public_port %> ssl http2 ipv6only=on;
  server_name <%= @server_name %>;

  <% if @ssl_certificate %>
    ssl_certificate     <%= @ssl_certificate %>;
  <% else %>
    ssl_certificate     /etc/nginx/ssl/nginx.crt;
  <% end %>
  <% if @ssl_certificate_key %>
    ssl_certificate_key     <%= @ssl_certificate_key %>;
  <% else %>
    ssl_certificate_key     /etc/nginx/ssl/nginx.key;
  <% end %>
  <% if @ssl_trusted_certificate %>
    ssl_trusted_certificate     <%= @ssl_trusted_certificate %>;
  <% end %>

  limit_conn arbeit 32;

  ## Keep alive timeout set to a greater value for SSL/TLS.
  keepalive_timeout 75 75;

  # Defining personal log files
  access_log /var/log/nginx/<%= @server_name %>.access.log;
  error_log  /var/log/nginx/<%= @server_name %>.error.log;

  ## Strict Transport Security header for enhanced security. See
  ## http://www.chromium.org/sts. I've set it to 2 hours; set it to
  ## whichever age you want. However, we can't set this here because adding
  ## a header will drop all other headers set earlier. See
  ## http://nginx.org/en/docs/http/ngx_http_headers_module.html#add_header
  ## for details.  Instead, uncomment this in nginx.conf.
  ## add_header Strict-Transport-Security "max-age=7200";

  root <%= @root_folder %>;

  ## If you're using a Nginx version greater or equal to 1.1.4 then
  ## you can use keep alive connections to the upstream be it
  ## FastCGI or Apache. If that's not the case comment out the line below.
  fastcgi_keep_conn on; # keep alive to the FCGI upstream

  ## Uncomment if you're proxying to Apache for handling PHP.
  #proxy_http_version 1.1; # keep alive to the Apache upstream

  ## See the blacklist.conf file at the parent dir: /etc/nginx.
  ## Deny access based on the User-Agent header.
  if ($bad_bot) {
      return 444;
  }
  ## Deny access based on the Referer header.
  if ($bad_referer) {
      return 444;
  }

  ## Protection against illegal HTTP methods. Out of the box only HEAD,
  ## GET and POST are allowed.
  if ($not_allowed_method) {
      return 405;
  }

  # Allow "Well-Known URIs" as per RFC 5785.
  # Necessary for Let’s Encrypt validation server.
  location ~* ^/.well-known/ {
      allow all;
  }

  # Pass the request to varnish
  location / {
    # running varnish on host:port (default to 127.0.0.1:6081)
    proxy_pass       varnish;
  }
}

# Backend that proxies to HHVM (PHP processor)
# This will be accessed by Varnish if no cache is found.
server {
  # Only listen to localhost requests (from varnish)
  listen      127.0.0.1:<%= @php_backend_port %>;
  server_name <%= @server_name %>;

  # TODO: Do we need ssl/https/tls setup on this 'backend'?

  # Defining personal log files
  access_log /var/log/nginx/<%= @server_name %>.access.log;
  error_log  /var/log/nginx/<%= @server_name %>.error.log;

  root <%= @root_folder %>;

  ## If you're using a Nginx version greater or equal to 1.1.4 then
  ## you can use keep alive connections to the upstream be it
  ## FastCGI or Apache. If that's not the case comment out the line below.
  fastcgi_keep_conn on; # keep alive to the FCGI upstream

  ## Uncomment if you're proxying to Apache for handling PHP.
  #proxy_http_version 1.1; # keep alive to the Apache upstream

  ## See the blacklist.conf file at the parent dir: /etc/nginx.
  ## Deny access based on the User-Agent header.
  if ($bad_bot) {
      return 444;
  }
  ## Deny access based on the Referer header.
  if ($bad_referer) {
      return 444;
  }

  ## Protection against illegal HTTP methods. Out of the box only HEAD,
  ## GET and POST are allowed.
  if ($not_allowed_method) {
      return 405;
  }

  # Allow "Well-Known URIs" as per RFC 5785.
  # Necessary for Let’s Encrypt validation server.
  location ~* ^/.well-known/ {
      allow all;
  }

  ################################################################
  ### Generic configuration: for most Drupal 7 sites.
  ################################################################
  include apps/drupal/drupal.conf;

  ################################################################
  ### Configuration for Drupal 7 sites to serve URIs that need
  ### to be **escaped**
  ################################################################
  #include apps/drupal/drupal_escaped.conf;

  #################################################################
  ### Configuration for Drupal 7 sites that use boost.
  #################################################################
  #include apps/drupal/drupal_boost.conf;

  #################################################################
  ### Configuration for Drupal 7 sites that use boost if having
  ### to serve URIs that need to be **escaped**
  #################################################################
  #include apps/drupal/drupal_boost_escaped.conf;

  #################################################################
  ### Configuration for updating the site via update.php and running
  ### cron externally. If you don't use drush for running cron use
  ### the configuration below.
  #################################################################
  #include apps/drupal/drupal_cron_update.conf;

  ################################################################
  ### Installation handling. This should be commented out after
  ### installation if on an already installed site there's no need
  ### to touch it. If on a yet to be installed site. Uncomment the
  ### line below and comment out after installation. Note that
  ### there's a basic auth in front as secondary ligne of defense.
  ################################################################
  include apps/drupal/drupal_install.conf;

  #################################################################
  ### Support for upload progress bar. Configurations differ for
  ### Drupal 6 and Drupal 7.
  #################################################################
  include apps/drupal/drupal_upload_progress.conf;

  ## Including the php-fpm status and ping pages config.
  ## Uncomment to enable if you're running php-fpm.
  #include php_fpm_status_vhost.conf;

  ## Including the Nginx stub status page for having stats about
  ## Nginx activity: http://wiki.nginx.org/HttpStubStatusModule.
  #include nginx_status_vhost.conf;


###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
  # This is our primary location block. The try_files directive will
  # attempt to serve the data in the order listed. First try the exact
  # request (such as an image or text file). If it doesn't exist, see if
  # the directory exists. If not, then we move to the rewrite which is
  # used for the front-end controller pattern.
  #location / {
  #  try_files $uri $uri/ @rewrite;
  #}

  # This will rewrite our request from domain.com/node/1/ to domain.com/index.php?q=node/1
  # This could be done in try_files without a rewrite however, the GlobalRedirect
  # module enforces no slash (/) at the end of URL's. This rewrite removes that
  # so no infinite redirect loop is reached.
  #location @rewrite {
  #  rewrite ^/(.*)$ /index.php?q=$1;
  #}

  # include polignu_settings/hhvm.conf;
}
