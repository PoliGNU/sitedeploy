# Redirect all http (80) to https (443) (www and non-www)
server {
  listen       80;
  # listen       [::]:80 ipv6only=on;
  server_name  <%= @server_name %> www.<%= @server_name %>;

  include      polignu_settings/letsencrypt-challange.conf;

  return       301 https://$server_name:<%= @ssl_public_port %>$request_uri;
}

# Redirect www https traffic to non-www https traffic
server {
  listen      <%= @ssl_public_port %> ssl http2;
  # listen      [::]:<%= @ssl_public_port %> ipv6only=on;
  server_name ~^(www\.)(?<domain><%= @server_name %>)$;

  # TODO
  ssl_certificate     /etc/nginx/ssl/nginx.crt;  # Change to letsencrypt cert
  ssl_certificate_key /etc/nginx/ssl/nginx.key;  # Change to letsencrypt cert

  # Including some SSL configs
  include polignu_settings/ssl-setup.conf;

  include     polignu_settings/letsencrypt-challange.conf;

  return      301 https://$domain:<%= @ssl_public_port %>$request_uri;
}

# Do the https magic and proxy the request to varnish on port 6081
server {
  listen <%= @ssl_public_port %> ssl http2;
  # listen [::]:<%= @ssl_public_port %> ipv6only=on;
  server_name <%= @server_name %>;

  # TODO
  ssl_certificate     /etc/nginx/ssl/nginx.crt;  # Change to letsencrypt cert
  ssl_certificate_key /etc/nginx/ssl/nginx.key;  # Change to letsencrypt cert

  # Including some SSL configs
  include polignu_settings/ssl-setup.conf;

  # Defining personal log files
  access_log /var/log/nginx/<%= @server_name %>.access.log;
  error_log  /var/log/nginx/<%= @server_name %>.error.log;

  include polignu_settings/letsencrypt-challange.conf;

  # Pass the request to varnish
  location / {
    # running varnish on port 6081
    proxy_pass       http://127.0.0.1:6081;
    # Passing some headers to downstream server, so it can identify the host
    include proxy_params;
    proxy_set_header X-Real-IP  $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Port 443;
    proxy_set_header Host $host;
    proxy_redirect   off;
  }
}

# Backend that proxies to HHVM (PHP processor)
# This will be accessed by Varnish if no cache is found.
server {
  # Only listen to localhost requests (from varnish)
  listen      127.0.0.1:8080;
  server_name <%= @server_name %>;

  include     polignu_settings/letsencrypt-challange.conf;

  root <%= @root_folder %>;

  access_log /var/log/nginx/<%= @server_name %>.access.log;
  error_log  /var/log/nginx/<%= @server_name %>.error.log;

  # In some cases a favicon does not exist but this is not something you
  # normally need to worry about. It's also a microscopic image and will
  # just clutter the logs.
  location = /favicon.ico {
    log_not_found off;
    access_log off;
  }

  # This is for the robots.txt file used by search engines.
  location = /robots.txt {
    # If you have one, you want to allow them access to it.
    allow all;
    # If you don't have one, you don't want to fill your logs with
    # not found errors.
    log_not_found off;
    access_log off;
  }

  # This matters if you use drush because drush copies backups of modules
  # to this directory. In the event personal information wound up in the
  # module, you want to know outside users can't access it.
  location = /backup {
    deny all;
  }

  # Very rarely should these ever be accessed outside of your lan
  # The above location for robots.txt is an exact match and will override
  # this location block.
  location ~* \.(txt|log)$ {
    allow 192.168.0.0/16;
    deny all;
  }

  # This location block protects against a known attack. It happens if
  # the attacker uploads a non-php file and attempts to run it as a
  # php file on the server.
  location ~ \..*/.*\.php$ {
    return 403;
  }

  # This is our primary location block. The try_files directive will
  # attempt to serve the data in the order listed. First try the exact
  # request (such as an image or text file). If it doesn't exist, see if
  # the directory exists. If not, then we move to the rewrite which is
  # used for the front-end controller pattern.
  location / {
    try_files $uri $uri/ @rewrite;
  }

  # This will rewrite our request from domain.com/node/1/ to domain.com/index.php?q=node/1
  # This could be done in try_files without a rewrite however, the GlobalRedirect
  # module enforces no slash (/) at the end of URL's. This rewrite removes that
  # so no infinite redirect loop is reached.
  location @rewrite {
    rewrite ^/(.*)$ /index.php?q=$1;
  }

  include polignu_settings/hhvm.conf;
}
